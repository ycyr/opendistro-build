name: Process RPM Artifacts

on:
  #schedule:
  #  - cron: '0 10 * * *'
  repository_dispatch:
    types: [test-build-rpm-temp]
#  push:
#    branches: [opendistro-infra-issue-215-1]

jobs:
#  Provision-Runners:
#    name: Provision-Runners
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
#          aws-region: us-west-2
#      - name: AWS Cli Provisioning
#        run: |
#          #!/bin/bash
#          RUNNERS="odfe-rpm-ism,odfe-rpm-ism-nosec,odfe-rpm-alerting,odfe-rpm-alerting-nosec,"
#          RUNNERS+="odfe-rpm-sql,odfe-rpm-sql-nosec,odfe-rpm-knn,odfe-rpm-knn-nosec,"
#          RUNNERS+="odfe-rpm-ad,odfe-rpm-ad-nosec"
#          RUNNERS_KIBANA=""
#          .github/scripts/setup_runners.sh run $RUNNERS ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
#
#  Test-Plugins-With-Security:
#    needs: [signing-artifacts]
#    name: Test-Plugins-With-Security
#    runs-on: [self-hosted, Linux, X64, odfe-rpm]
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Setup Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: 14
#      
#      - name: Installing python
#        run: sudo yum install python37 -y
#      
#      - name: Getting OD version
#        run: |
#          OD_VERSION=`./bin/version-info --od`
#          echo "::set-env name=od_version::$OD_VERSION"
#      - name: Starting ES service
#        run: |
#          echo $JAVA_HOME
#          sudo yum install git -y
#          sudo curl https://d3g5vo6xdbdb9a.cloudfront.net/yum/staging-opendistroforelasticsearch-artifacts.repo  -o /etc/yum.repos.d/staging-opendistroforelasticsearch-artifacts.repo
#          sudo yum install wget -y
#          export PATH=$PATH:$JAVA_HOME
#          sudo yum install unzip -y
#          sudo yum install opendistroforelasticsearch-${{env.od_version}} -y
#          sudo mkdir /home/repo
#          sudo chmod 777 /home/repo
#          sudo chmod 777 /etc/elasticsearch/elasticsearch.yml    
#          sudo sed -i '/path.logs/a path.repo: ["/home/repo"]' /etc/elasticsearch/elasticsearch.yml 
#          sudo sed -i /^node.max_local_storage_nodes/d /etc/elasticsearch/elasticsearch.yml
#          sudo systemctl start elasticsearch.service
#          sleep 30
#          
#      - name: Retrieve plugin tags
#        run: |
#          echo ::set-env name=p_tag_ism::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)
#          echo ::set-env name=p_tag_alerting::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/alerting)
#          echo ::set-env name=p_tag_sql::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)
#          echo ::set-env name=p_tag_knn::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/k-NN)
#          echo ::set-env name=p_tag_ad::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)
#      - name: Checking out SQL repo
#        if: always()
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/sql
#          ref: ${{env.p_tag_sql}}
#      
#      - name: IT for SQL
#        if: always()
#        run: |
#          curl -XGET https://127.0.0.1:9200 -u admin:admin --insecure
#          export PATH=$PATH:$JAVA_HOME
#          cd $GITHUB_WORKSPACE/../sql
#          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest -Dhttps=true -Duser=admin -Dpassword=admin
#          
#      - name: Checking out AD repo
#        if: always()
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/anomaly-detection
#          ref: ${{env.p_tag_ad}}
#          
#      - name: IT for AD
#        if: always()
#        run: |
#          curl -XGET https://127.0.0.1:9200 -u admin:admin --insecure
#          export PATH=$PATH:$JAVA_HOME
#          cd $GITHUB_WORKSPACE/../anomaly-detection
#          ./gradlew :integTestRunner --tests "com.amazon.opendistroforelasticsearch.ad.rest.*IT" --tests "com.amazon.opendistroforelasticsearch.ad.e2e.*IT" -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername="es-integrationtest" -Dhttps=true -Duser=admin -Dpassword=admin
#  
#  Test-Plugins-Without-Security:
#    needs: [Test-Plugins-With-Security]
#    name: Test-Plugins-Without-Security
#    runs-on: [self-hosted, Linux, X64, odfe-rpm]
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Setup Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: 14
#      
#      - name: Installing python
#        run: sudo yum install python37 -y
#      
#      - name: Getting OD version
#        run: |
#          OD_VERSION=`./bin/version-info --od`
#          echo "::set-env name=od_version::$OD_VERSION"
#      - name: Starting ES service
#        run: |
#          echo $JAVA_HOME
#          export PATH=$PATH:$JAVA_HOME
#          sudo systemctl stop elasticsearch.service  
#          
#          sudo /usr/share/elasticsearch/bin/elasticsearch-plugin remove opendistro_security
#          sudo sed -i /^opendistro_security/d /etc/elasticsearch/elasticsearch.yml
#          sudo sed -i /CN=kirk/d /etc/elasticsearch/elasticsearch.yml
#          sudo sed -i /^cluster.routing.allocation.disk.threshold_enabled/d /etc/elasticsearch/elasticsearch.yml
#          sudo systemctl start elasticsearch.service
#          sleep 30
#          
#      - name: Retrieve plugin tags
#        run: |
#          echo ::set-env name=p_tag_ism::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)
#          echo ::set-env name=p_tag_alerting::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/alerting)
#          echo ::set-env name=p_tag_sql::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)
#          echo ::set-env name=p_tag_knn::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/k-NN)
#          echo ::set-env name=p_tag_ad::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)
#      - name: Checking out ISM repo
#        if: always()
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/index-management
#          ref: ${{env.p_tag_ism}}
#
#      - name: IT for ISM
#        if: always()
#        run: |  
#          curl -XGET http://127.0.0.1:9200
#          export PATH=$PATH:$JAVA_HOME
#          cd $GITHUB_WORKSPACE/../index-management
#          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
#      - name: Checking out Alerting repo
#        if: always()
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/alerting
#          ref: ${{env.p_tag_alerting}}
#
#      - name: IT for alerting
#        if: always()
#        run: |
#          curl -XGET http://127.0.0.1:9200
#          export PATH=$PATH:$JAVA_HOME
#          cd $GITHUB_WORKSPACE/../alerting
#          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
#      - name: Checking out SQL repo
#        if: always()
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/sql
#          ref: ${{env.p_tag_sql}}
#      
#      - name: IT for SQL
#        if: always()
#        run: |
#          curl -XGET http://127.0.0.1:9200
#          export PATH=$PATH:$JAVA_HOME
#          cd $GITHUB_WORKSPACE/../sql
#          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
#          
#      - name: Checking out AD repo
#        if: always()
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/anomaly-detection
#          ref: ${{env.p_tag_ad}}
#          
#      - name: IT for AD
#        if: always()
#        run: |
#          curl -XGET http://127.0.0.1:9200
#          export PATH=$PATH:$JAVA_HOME
#          cd $GITHUB_WORKSPACE/../anomaly-detection
#          ./gradlew :integTestRunner --tests "com.amazon.opendistroforelasticsearch.ad.rest.*IT" --tests "com.amazon.opendistroforelasticsearch.ad.e2e.*IT" -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
#      - name: Checking out k-NN repo
#        if: always()
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/k-NN
#          ref: ${{env.p_tag_knn}}
#          
#      - name: IT for KNN
#        if: always()
#        run: |
#          curl -XGET http://127.0.0.1:9200
#          export PATH=$PATH:$JAVA_HOME
#          cd $GITHUB_WORKSPACE/../k-NN
#          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
#
#
#  CleanUp-Runners:
#    #needs: [Test-Plugins-With-Security]
#    name: CleanUp-Runners
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
#          aws-region: us-west-2
#      - name: AWS Cli Provisioning
#        run: |
#          #!/bin/bash
#          RUNNERS="odfe-rpm-ism,odfe-rpm-ism-nosec,odfe-rpm-alerting,odfe-rpm-alerting-nosec,"
#          RUNNERS+="odfe-rpm-sql,odfe-rpm-sql-nosec,odfe-rpm-knn,odfe-rpm-knn-nosec,"
#          RUNNERS+="odfe-rpm-ad,odfe-rpm-ad-nosec"
#          RUNNERS_KIBANA=""
#          .github/scripts/setup_runners.sh terminate $RUNNERS ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
#
